@startuml
namespace ast {
    class AST << (S,Aquamarine) >> {
        - pos int

        + Name string
        + Content []byte
        + Nodes []Node

        + Pos() int

    }
    class ASTBuilder << (S,Aquamarine) >> {
        - curEntry Entry
        - input []Node
        - name string
        - content []byte
        - entries []Node
        - warns []string
        - errs []error
        - toSkip []reflect.Type

        - finishEntry(cur Node) 
        - resetState() 
        - reset() 
        - genParseMap() <font color=blue>map</font>[reflect.Type]<font color=blue>func</font>(Node, int) 
        - handleComment(node Node, i int) 
        - handleMsgctxt(node Node, i int) 
        - handleMsgid(node Node, i int) 
        - handleMsgstr(node Node, i int) 
        - handleMsgidPlural(node Node, i int) 
        - handleMsgstrPlural(node Node, i int) 
        - appendWarn(format string, a ...any) 
        - appendErr(err error) 
        - appendErrf(format string, a ...any) 
        - comingType(offset int, ignore []reflect.Type) reflect.Type
        - typeIsComing(offset int, ignore []reflect.Type, wanted ...reflect.Type) bool

        + AST() *AST
        + Entries() []Entry
        + Errors() []error
        + Warnings() []string
        + Build() 

    }
    class Entry << (S,Aquamarine) >> {
        - pos int

        + Flags []*FlagComment
        + ExtractedComments []*ExtractedComment
        + LocationComments []*LocationComment
        + GeneralComments []*GeneralComment
        + PreviousComments []*PreviousComment
        + Msgid *Msgid
        + Msgstr *Msgstr
        + Msgctxt *Msgctxt
        + Plural *MsgidPlural
        + Plurals []*MsgstrPlural

        + Pos() int

    }
    class ExtractedComment << (S,Aquamarine) >> {
        - pos int

        + Text string

        + Pos() int

    }
    class FlagComment << (S,Aquamarine) >> {
        - pos int

        + Flag string

        + Pos() int

    }
    class GeneralComment << (S,Aquamarine) >> {
        - pos int

        + Text string

        + Pos() int

    }
    class Generator << (S,Aquamarine) >> {
        - file *AST
        - errs []error

        - genEntries() po.Entries

        + Errors() []error
        + Generate() *po.File

    }
    class LocationComment << (S,Aquamarine) >> {
        - pos int

        + File string
        + Line int

        + Pos() int

    }
    class Msgctxt << (S,Aquamarine) >> {
        - pos int

        + Context string

        + Pos() int

    }
    class Msgid << (S,Aquamarine) >> {
        - pos int

        + ID string

        + Pos() int

    }
    class MsgidPlural << (S,Aquamarine) >> {
        - pos int

        + Plural string

        + Pos() int

    }
    class Msgstr << (S,Aquamarine) >> {
        - pos int

        + Str string

        + Pos() int

    }
    class MsgstrPlural << (S,Aquamarine) >> {
        - pos int

        + PluralID int
        + Str string

        + Pos() int

    }
    interface Node  {
        + Pos() int

    }
    class PluralEntry << (S,Aquamarine) >> {
        + ID int
        + Str string

    }
    class PreviousComment << (S,Aquamarine) >> {
        - pos int

        + Text string

        + Pos() int

    }
    class Tokenizer << (S,Aquamarine) >> {
        - input []byte
        - tokens []token.Token
        - position int
        - nodes []Node
        - errors []error
        - name string

        - readStringIdent() (string, error)
        - comment() (Node, error)
        - msgid() (Node, error)
        - msgstr() (Node, error)
        - msgctxt() (Node, error)
        - pluralMsgid() (Node, error)
        - pluralMsgstr() (Node, error)
        - collectTokens(l *lexer.Lexer) 
        - genParseMap() <font color=blue>map</font>[token.Type]parserFunc

        + Normalizer() (*ASTBuilder, []error)
        + Tokenize() 
        + Nodes() []Node
        + Errors() []error

    }
    class ast.parserFunc << (T, #FF7700) >>  {
    }
}

"ast.Node" <|-- "ast.AST"
"ast.Node" <|-- "ast.Entry"
"ast.Node" <|-- "ast.ExtractedComment"
"ast.Node" <|-- "ast.FlagComment"
"ast.Node" <|-- "ast.GeneralComment"
"ast.Node" <|-- "ast.LocationComment"
"ast.Node" <|-- "ast.Msgctxt"
"ast.Node" <|-- "ast.Msgid"
"ast.Node" <|-- "ast.MsgidPlural"
"ast.Node" <|-- "ast.Msgstr"
"ast.Node" <|-- "ast.MsgstrPlural"
"ast.Node" <|-- "ast.PreviousComment"

namespace lexer {
    class Lexer << (S,Aquamarine) >> {
        - input []byte
        - pos int
        - read int
        - char rune
        - prev rune

        - readChar() 
        - isKeyword() bool
        - readKeyword() string
        - readString() string
        - readComment() string
        - skipWhitespace() 

        + NextToken() token.Token

    }
}


namespace parse {
    class Config << (S,Aquamarine) >> {
        + Logger *log.Logger
        + Verbose bool
        + SkipHeader bool
        + CleanDuplicates bool

    }
    class Parser << (S,Aquamarine) >> {
        - config Config
        - options []Option
        - norm *ast.ASTBuilder
        - warns []string
        - errors []error

        - applyOptions(opts ...Option) 
        - processpath(content []byte, path string) error

        + Errors() []error
        + Warnings() []string
        + Parse(options ...Option) *po.File

    }
    class parse.Option << (T, #FF7700) >>  {
    }
}


namespace token {
    class Token << (S,Aquamarine) >> {
        + Type Type
        + Literal string
        + Pos int

    }
    class token.Type << (T, #FF7700) >>  {
    }
}


"__builtin__.string" #.. "token.Type"
"ast.<font color=blue>func</font>() (Node, error)" #.. "ast.parserFunc"
"parse.<font color=blue>func</font>(*Config) " #.. "parse.Option"
@enduml
