@startuml
namespace parse {
    class Config << (S,Aquamarine) >> {
        - lastCfg any

        + Exclude []string
        + ExtractAll bool
        + NoHeader bool
        + HeaderConfig *po.HeaderConfig
        + HeaderOptions []po.HeaderOption
        + Header *po.Header
        + Logger *log.Logger
        + Verbose bool
        + CleanDuplicates bool

        + RestoreLastCfg() 
        + ApplyOptions(opts ...Option) 

    }
    class File << (S,Aquamarine) >> {
        - config *Config
        - seenNodes <font color=blue>map</font>[ast.Node]bool
        - file *ast.File
        - reader *bytes.Reader
        - name string
        - pkgName string
        - hasGotext bool
        - errors []error

        - error(format string, a ...any) error
        - parse() error
        - determinePackageInfo() 
        - isGotextCall(n ast.Node) bool
        - basicLitToEntry(n *ast.BasicLit) (po.Entry, error)
        - extractArg(index int, call *ast.CallExpr) argumentData
        - processPoCall(call *ast.CallExpr) (po.Entry, bool, error)
        - processNode(n ast.Node) (po.Entries, []error)

        + Reset(d io.Reader, name string, config *Config) error
        + Errors() []error
        + Error() error
        + Entries() po.Entries

    }
    class Parser << (S,Aquamarine) >> {
        - files []*File
        - seen <font color=blue>map</font>[string]bool
        - errors []error

        + Config Config

        - error(format string, a ...any) 
        - lastErr() error
        - info(format string, a ...any) 
        - appendFiles(files ...string) error

        + ParseWithOptions(options ...Option) *po.File
        + Parse() *po.File
        + Error() error
        + Errors() []error
        + Files() []*File

    }
    class argumentData << (S,Aquamarine) >> {
        - str string
        - valid bool
        - err error
        - pos token.Pos

    }
    class parse.Option << (T, #FF7700) >>  {
    }
    class translationMethod << (S,Aquamarine) >> {
        + ID int
        + Plural int
        + Context int

    }
}


"parse.<font color=blue>func</font>(*Config) " #.. "parse.Option"
@enduml
